m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- pinv(data, ...)
x$setinverse(m)
m
}
b <- makeCacheMatrix(matrix(1:10,2,5))
cacheSolve(b)
A <- matrix(c(7,6,4,8,10,11,12,9,3,5,1,2), 3, 4)
A
b <- apply(A, 1, sum)
b
x <- pinv(A) %*% b
x <- Ginv(A)
library(matlib)
install.packages("matlib")
library(matlib)
A <- matrix(c(7,6,4,8,10,11,12,9,3,5,1,2), 3, 4)
pinv(A)
Ginv(A)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (isSymmmetric(data)){
m <- solve(data)
x$setinverse(m)
return(m)
}
install.packages("matlib")
library(matlib)
m <- Ginv(data, ...)
x$setinverse(m)
m
}
library(matlib)
b <- makeCacheMatrix(matrix(1:10, 2, 5))
b$getinverse()
b$get()
cacheSolve(b)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (isSymmmetric.matrix(data)){
m <- solve(data)
x$setinverse(m)
return(m)
}
install.packages("matlib")
library(matlib)
m <- Ginv(data, ...)
x$setinverse(m)
m
}
cacheSolve(b)
A <- matrix( c( 1, 2, 3, 4 ), nrow=2, byrow=TRUE )
A
is.symmetric.matrix( A )
install.packages("matrixNormal")
library(matrixNormal)
is.symmetric.matrix( A )
is.symmetric.matrix( A )[3]
is.symmetric.matrix( A )(3)
is.symmetric.matrix( A )[[3]]
is.symmetric.matrix( A ) == TRUE
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
install.packages("matrixNormal")
library(matrixNormal)
data <- x$get()
if (isSymmmetric.matrix(data)){
m <- solve(data)
x$setinverse(m)
return(m)
}
install.packages("matlib")
library(matlib)
m <- Ginv(data, ...)
x$setinverse(m)
m
}
cacheSolve(b)
install.packages("matrixNormal")
cacheSolve(b)
b <- makeCacheMatrix(matrix(1:10,2,5))
cacheSolve(b)
install.packages("matrixNormal")
install.packages("matrixNormal")
library(matrixNormal)
install.packages("matlib")
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (isSymmmetric.matrix(data)){
m <- solve(data)
x$setinverse(m)
return(m)
}
m <- Ginv(data, ...)
x$setinverse(m)
m
}
b <- makeCacheMatrix(matrix(1:10,2,5))
cacheSolve(b)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (is.symmmetric.matrix(data)){
m <- solve(data)
x$setinverse(m)
return(m)
}
m <- Ginv(data, ...)
x$setinverse(m)
m
}
cacheSolve(b)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (is.square.matrix(data)){
m <- solve(data)
x$setinverse(m)
return(m)
}
m <- Ginv(data, ...)
x$setinverse(m)
m
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (is.square.matrix(data)){
m <- solve(data)
x$setinverse(m)
return(m)
}
m <- Ginv(data, ...)
x$setinverse(m)
m
}
cacheSolve(b)
library(matrixNormal)
B <- matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, byrow = TRUE)
is.square.matrix(B)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (is.square.matrix(data)){
m <- solve(data)
x$setinverse(m)
return(m)
}
m <- Ginv(data, ...)
x$setinverse(m)
m
}
B <- makeCacheMatrix(matrix(c(1, 2, 3, 4, 5, 6), nrow = 2, byrow = TRUE))
B
B$get()
cacheSolve(B)
library(matlib)
library(matlib)
cacheSolve(B)
B$getinverse()
A <- makeCacheMatrix(matrix(1:10), 4,4)
A <- makeCacheMatrix(matrix(1:10,4,4))
A$get()
cacheSolve(A)
cacheSolve(B)
cacheSolve(A)
cacheSolve(A)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (is.square.matrix(data)){
m <- inv(data)
x$setinverse(m)
return(m)
}
m <- Ginv(data, ...)
x$setinverse(m)
m
}
cacheSolve(A)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
if (is.singular.matrix(data)){
m <- inv(data)
x$setinverse(m)
return(m)
}
m <- Ginv(data, ...)
x$setinverse(m)
m
}
cacheSolve(A)
library(matrixcalc)
install.packages("matrixcalc")
library(matrixcalc)
cacheSolve(A)
M7<âˆ’matrix(rpois(64,2),ncol=8)
is.singular.matrix(M7)
is.singular.matrix(A$get())
a1 <- c(3, 2, 5)
a2 <- c(2, 3, 2)
a3 <- c(5, 2, 4)
A <- makeCacheMatrix(rbind(a1, a2, a3))
A$get()
cacheSolve(A)
M7 <- makeCacheMatrix(matrix(rpois(64,2),ncol=8))
cacheSolve(M7)
str(str)
str(lm)
str(ls)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
f <. gl(40,10)
f <- gl(40,10)
str(f)
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100), 10,10)
summary(m)
str(m)
s <- split(airquality, airquality$Month)
str(s)
library(reshape2)
install.packages(reshape2)
library(reshape2)
install.packages("reshape2")
library(reshape2)
head(mtcars)
# Melting data frames
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,
id = c("carname","gear","cyl"),
measure.vars = c("mpg","hp"))
carMelt <- melt(mtcars,
id = c("carname","gear","cyl"),
measure.vars = c("mpg","hp"))
install.packages("reshape")
library(reshape)
carMelt <- melt(mtcars,
id = c("carname","gear","cyl"),
measure.vars = c("mpg","hp"))
head(carMelt, n=3)
head(mtcars)
tail(carMelt, n=3)
# Casting data frames
cylData <- dcast(carMelt, cyl ~ variable)
# Casting data frames
cylData <- dcast(carMelt, cyl ~ variable)
# Casting data frames
cylData <- cast(carMelt, cyl ~ variable)
# Casting data frames
cylData <- dcast(carMelt, cyl ~ variable)
?dcast
??dcast
# Casting data frames
cylData <- dcast(carMelt, cyl ~ variable)
library(reshape2)
library(reshape2)
install.packages("reshape2")
library(reshape2)
install.packages("reshape")
install.packages("reshape")
install.packages("reshape2")
library(reshape2)
library(reshape2)
library(reshape)
library(reshape2)
head(mtcars)
# Melting data frames
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,
id = c("carname","gear","cyl"),
measure.vars = c("mpg","hp"))
head(carMelt, n=3)
tail(carMelt, n=3)
# Casting data frames
cylData <- dcast(carMelt, cyl ~ variable)
library(reshape2)
install.packages("stringi")
setwd("~/Cursos/Data_Science_Specialization/Getting_and_Cleaning_Data/project")
subjectTest <- read.table("data/test/subject_test.txt", skip = 0)
dim(subjectTest)
X_test <- read.table("data/test/X_test.txt", skip = 0)
dim(X_test)
y_test <- read.table("data/test/y_test.txt", skip = 0)
dim(y_test)
subjectTrain <- read.table("data/train/subject_train.txt", skip = 0)
dim(subjectTrain)
X_train <- read.table("data/train/X_train.txt", skip = 0)
dim(X_train)
y_train <- read.table("data/train/y_train.txt", skip = 0)
dim(y_train)
df_test <- cbind(subjectTest, y_test, X_test)
dim(df_test)
df_train <- cbind(subjectTrain, y_train, X_train)
dim(df_train)
df <- rbind(df_test, df_train)
dim(df)
labels <- read.table("data/features.txt")
names(df) <- c("subject", "activity_label", labels$V2)
df_mean <- df[, grep("mean", c("subject", "activity_label", labels$V2))]
df_std <- df[, grep("std", c("subject", "activity_label", labels$V2))]
df_mean_std <- cbind(df_mean, df_std)
dim(df_mean_std)
df_mean_std_2 <- data.frame()
for (i in names(df)[3:563])
{
df_mean_std_2 <- rbind(df_mean_std_2, c(i, mean(df[,i]), sd(df[,i])))
}
names(df_mean_std_2) <- c("value", "Mean", "Standard_Deviation")
dim(df_mean_std_2)
head(df_mean_std_2)
activity_labels <- read.table("data/activity_labels.txt")
names(activity_labels) <- c("activity_label", "activity_name")
head(activity_labels)
df <- merge(activity_labels, df,
by.x = "activity_label",
by.y = "activity_label")
df <- select(df, 2:564)
library(dplyr)
df <- select(df, 2:564)
df <- tbl_df(df)
df <- as_tibble(df)
head(df)
colnames <- names(df)
colnames <- gsub("-","",colnames)
colnames <- gsub("[()]$","",colnames)
colnames <- gsub("[()]$","",colnames)
colnames <- gsub("[()]","",colnames)
colnames <- gsub(",","_",colnames)
colnames
df_group1 <- df %>% group_by("activity_name") %>% summarise(mean = mean("tBodyAcc-mean()-Y"))
head(df)
as.numeric(df[,2:563])
as.numeric(df[,2])
?apply
apply(df[,2:563], as.numeric)
?sapply
sapply(df[,2:563], as.numeric)
df[,2:563] <- sapply(df[,2:563], as.numeric)
df_group1 <- df %>% group_by("activity_name") %>% summarise(mean = mean("tBodyAcc-mean()-Y"))
names(df) <- colnames
df_group1 <- df %>% group_by("activity_name") %>% summarise(mean = mean())
head(df)
df_group1 <- df %>% group_by("activity_name") %>% summarise(mean = mean("tBodyAccmeanX"))
df[,2:563] <- sapply(df[,2:563], as.numeric)
df_group1 <- df %>% group_by("activity_name") %>% summarise(mean = mean("tBodyAccmeanX"))
df_group1 <- df %>% group_by("activity_name") %>%
summarise(mean = mean("tBodyAccmeanX", rm.na = TRUE))
df[1:10,""tBodyAccmeanX""]
df[1:10,"tBodyAccmeanX"]
is.numeric(df[1:10,"tBodyAccmeanX"])
mean(df[1:10,"tBodyAccmeanX"])
mean(as.numeric(df[1:10,"tBodyAccmeanX"]))
mean(sapply(df[1:10,"tBodyAccmeanX"], as.numeric))
df[,2:563] <- sapply(df[,2:563], as.numeric)
df_group1 <- df %>% group_by("activity_name") %>%
summarise(mean = mean("tBodyAccmeanX", rm.na = TRUE))
head(df_group1)
names(df)
df_group1 <- df %>% group_by("activity_name")
head(df_group1)
df_group1 <- df %>% group_by("activity_name") %>%
summarise_all(list(mean))
summarise_if()
df_group1 <- df %>% group_by("activity_name") %>%
summarise_if(is.numeric, mean, na.rm = TRUE)
df_group1
head(df_group1)
df_group1 <- df %>% group_by("activity_name") %>%
summarise_if(is.numeric, list(mean,min,max), na.rm = TRUE)
head(df_group1)
df_group1 <- df %>% group_by("activity_name","subject") %>%
summarise_if(is.numeric, list(mean,min,max), na.rm = TRUE)
head(df_group1)
df_group1 <- df %>% group_by('activity_name','subject') %>%
summarise_if(is.numeric, list(mean,min,max), na.rm = TRUE)
head(df_group1)
df_group1 <- df %>% group_by(df$activity_name,df$subject) %>%
summarise_if(is.numeric, list(mean,min,max), na.rm = TRUE)
head(df_group1)
?summarise_if
group_by(df,"activity_name")
group_by(df,c("activity_name","subject")
group_by(df,c("subject")
group_by(df,c("subject"))
df_group1 <- group_by(df,c("subject"))
summarise_if(df_group1, is.numeric, mean)
# 5. From the data set in step 4, creates a second, independent ti --------
unique(df$activity_name)
?group_by
by_cyl <- mtcars %>% group_by(cyl)
by_cyl
# 5. From the data set in step 4, creates a second, independent ti --------
group_by(df,df$activity_name)
# 5. From the data set in step 4, creates a second, independent ti --------
df_group1 <- group_by(df,df$activity_name)
summarise_if(df_group1, is.numeric, mean)
head(df_group1)
# 5. From the data set in step 4, creates a second, independent ti --------
df_group1 <- group_by(df,df$activity_name, df$subject)
head(df_group1)
# 5. From the data set in step 4, creates a second, independent ti --------
df_group1 <- group_by(df,df$subject)
head(df_group1)
summarise_if(df_group1, is.numeric, mean)
head(df_group1)
# 5. From the data set in step 4, creates a second, independent ti --------
df_group1 <- group_by(df,df$subject)
head(df_group1)
summarise_if(df_group1, is.numeric, mean)
# 5. From the data set in step 4, creates a second, independent ti --------
df_group1 <- group_by(df,df$subject, df$activity_name)
head(df_group1)
summarise_if(df_group1, is.numeric, mean)
# 5. From the data set in step 4, creates a second, independent ti --------
df_group1 <- group_by(df,df$activity_name,df$subject)
head(df_group1)
summarise_if(df_group1, is.numeric, mean)
View(df_group1)
View(df_group1)
df_group1 <- summarise_if(df_group1, is.numeric, mean)
View(df_group1)
View(df_group1)
# Group by activity
df_group2 <- df %>% group_by(df$activity_name) %>%
summarise_if(is.numeric, mean)
head(df_group2)
df_group_activity <- df %>% group_by(df$activity_name) %>%
summarise_if(is.numeric, mean)
head(df_group_activity)
# Group by subject
df_group_subject <- df %>% group_by(df$subject) %>%
summarise_if(is.numeric, mean)
head(df_group_subject)
